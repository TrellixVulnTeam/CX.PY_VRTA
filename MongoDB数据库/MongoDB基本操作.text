一、操作MongoDB数据库
	1、创建数据库
		语法：use 数据库名
		注意：如果数据库不存在那就创建数据库，否则切换到指定的数据库
		如果刚创建的数据库，不在列表内，如果要显示他，我们需要向刚刚创建的数据库中插入一些数据
		db.student.insert({name:"tom",age:18,getnder:1,address:"北京"，isDelete：0})
	2、删除数据库
		前提是使用当前数据库（use 数据库名）
		db.dropDatebase()

	3、查看所有数据：
		show dbs

	4、查看当前正在使用的数据库 
		a、   db
		b、   db.getName()
	5、断开连接
		exit
	6、查看命令api
		help
二、集合操作
	1、查看当前数据库下有哪些集合
		show collections
	2、创建集合
		a、
			语法：db.createCollection("集合名")
			示例：db.createCollection("class")

		b、
			语法：db.集合名.insert(document)
			示例：db.student.insert({name:"tom",age:18,gender:1,address:"北京",isDelete：0})

			区别：前者创建的是一个空的集合，后者是创建一个空的集合并添加一个文档
	3、删除当前数据库中的集合
		语法：db.集合名.drop()
		示例：db.class.drop()


三、文档操作
	1、插入文档
	 a、使用insert（）方法插入文档
	 	语法：db.集合名.insert(文档)
	 	插入一个：db.student.insert({name:"李雷",age:19,gender:1,address:"北京",isDelete：0})
	 	插入多个：db.student.insert(【{name:"韩梅梅",age:19,gender:1,address:"北京",isDelete：1}，{name:"樊梦媛",age:22,gender:1,address:"保定",isDelete：1}】)

	 b、使用save（）方法插入文档
	 	语法：db.集合名.save（文档）
	 	说明：如果不指定_id字段，save（）方法类似于insert（）方法，如果指定_id字段，则会更新_id字段的数据
	 	示例1：db.student.save({name:"ioer",age:13,gender:1,address:"北京",isDelete：0})
	 	示例2：db.student.save({_id:ObjectId("5a990906754be868f1a8e8a4"),name:"dwef",age:54,gender:1,address:"石家庄"，isDelete：0})
	 2、文档更新
	 	a、update()用于更新一存在的文档
	 		语法：db.集合名.update(
	 							query,
	 							update,
	 							{
	 								upset:<boolean>,
	 								multi:<boolean>,
	 								writeConcern:<document>
	 							}
	 							)

	 		参数说明：
	 			query：update的查询条件，优点类似sql里update语句where后面的内容
	 			update：update的对象和一些更新的操作符($set,$inc)等，￥set直接更新，￥Inc在原有的基础上累加结果后更新
	 			upset：是可选的，如果不存在update的记录，是否当新数据插入，true为插入，false为不插入，默认为false
	 			multi：可选，MongoDB默认是false，只更新找到的第一条记录，如果这个参数为true，就按照条件查找出来的数据全部更新
	 			writeConcern：可选，抛出异常的级别


	 			需求：将李雷的年龄更新为25
	 			示例：db.student.update({name:"lilei"},{$set:{age:25}})
	 			示例：db.student.update({name:"lilei"},{$inc:{age:25}})
	 	b、 save()通过传入的文档提换已有的文档
	 		语法：db.集合名.save(
	 					document,
	 					{
	 						writeConcern：<document>
	 					}
	 					)
	 					document:文档数据
	 					writeConcern：可选，抛出异常的级别

	 3、文档删除
	 	说明：在执行remove（）前，先执行find（）命令来判断执行的条件是否存在


	 	语法：da.集合名.remove(
	 					{query},
	 					{
	 					JustOne:<boolean>
	 					writeConcern：<document>
	 					}
	 					)
	 		参数说明：
	 			query：可选，删除文档的条件，默认为全部文档
	 			JustOne：可选：如果为true或1，只删除一个文档
	 			writeConcern：可选，抛出异常的级别


	 		示例：db.student.remove({name:"ewe"})
	 4、文档查询
	 	a、find()方法
	 		查询集合下所有的文档
	 		语法：db.集合名.find()
	 		示例:db.studetn.find()
	 	b、find()方法查询指定列
	 		语法：db.集合名.find(
	 					{query},
	 					{
	 					<key>:1,
	 					<key>:1
	 					}
	 				)
	 				参数说明：
	 					query：查询条件
	 					key：要显示的字段，1表示显示
	 		示例：db.student.find({gender:1},{name:1,age:1})

	 	c、pretty（）方法以格式化的方式来显示文档
	 		示例：db.student.find().pretty()

	 	d、findOne()方法查询匹配结果的第一条数据
	 		示例：db.student.findOne({gender:1})


	 5、查询条件操作符
	 	作用：条件操作符，用于比较两个表达式，并从MongoDB集合中获取数据
	 a、大于=====$gt
	 		语法：db.集合名.find({<key>:{$gt:<value>}})
	 		示例：db.student.find({age:{$gt:20}})
	 b、大于等于=====$gte
	 		语法：db.集合名.find({<key>:{$gte:<value>}})
	 c、小于=======$lt
	 		语法：db.集合名.find({<key>:{$lt:<value>}})
	 d、小于等于=======$lte语法：db.集合名.find({<key>:{$lte:<value>}})
	 e、大于等于和小于等于===== $gte和$lte
	 		语法：db.集合名.find({<key>:{$gte:<value>,$lte:<value>}})
	 f、等于=== ：
	 		语法：db.student.find({<key>:<value>})
	 g、使用_id进行查询 
	 		语法：db.student.find({"_id":ObjectId("id")})
	 		示例：db.student.find({"_id":ObjectId("5a990906754be868f1a8e8a4")})
	 h、查询某个结果集的数据条数
	 		db.student.find().count()
	 i、查询某个字段的值当中是否包含另一个值
	 		语法：
	 		db.student.find({name:/梦媛/})	
	 j、查询某个字段的值是否以另一个开头 
	 		示例：db.student.find({name:/^樊/})

	 6、条件查询  and 和 or 
	 		a、 and 条件
	 			语法：db.集合名.find({条件1，条件2，……})
	 				db.student.find({gender:1,age:{$gt:18}})
	 		b、 or 条件
	 			语法：db.集合名.find(
	 				{
	 					$or:[{条件1}，{条件2}，……]
	 				}
	 				)
	 			示例：db.student.find({$or:[{age:22},{age:{$gte:16}}]})
	 		c、and 和 or 联合使用
	 			语法：db.集合名.find (
	 						{
	 						条件1，
	 						条件2，
	 						$or:[{条件1}，{条件2}]
	 						}
	 								)

	 7、limit  skip
	 	a、 limit():  读取指定数量的数据记录
	 		db.student.find().limit(2)
	 	b、 skip():  跳过指定数量的数据
	 		db.student.find().skip(2)
	 	c  skip 与 limit 联合使用
	 		通常用这种方式来实现分页功能
	 		示例：db.student.find().skip(2).limit(2)



	 8、排序
	 	语法：db.集合名.find().sort({<key>:1|-1})
	 	示例：db.student.find().sort({age:1})
	 	注意：1 表示升序，-1 表示降序




